#!/bin/sh /etc/rc.common

. /usr/share/functions/network_functions.sh
. /usr/share/functions/wireless_functions.sh
. /usr/share/functions/mesh_functions.sh

START=9F
STOP=1F

USE_PROCD=1

param_list() {

  local _wifi_config="$(get_wifi_local_config)"
  local _mesh_master="$(get_mesh_master)"
  local _mesh_mode="$(get_mesh_mode)"
  local _macaddr=""
  config_load wireless

  BRIDGE_IP_ADDR=""
  while true
  do
    BRIDGE_IP_ADDR="$(get_lan_bridge_ipaddr)"
    valid_ip "$BRIDGE_IP_ADDR"
    _retstatus=$?
    if [ $_retstatus -eq 0 ]
    then
      break
    fi
    sleep 5
  done
  json_init
  json_add_string "iface_ip" "$BRIDGE_IP_ADDR"
  json_add_string "mac" "$(get_mac)"
  json_add_string "ssid" "$(echo "$_wifi_config" | jsonfilter -e '@["local_ssid_24"]')"
  json_add_string "ssid_5" "$(echo "$_wifi_config" | jsonfilter -e '@["local_ssid_50"]')"
  [ "$(is_mesh_capable)" ] && json_add_int "mesh_support" "1"
  json_add_int "mesh" "$_mesh_mode"
  [ "$_mesh_master" ] && json_add_string "master" "$_mesh_master"
  # meshid2 meshid5 disable for now (use in 80211k/v)

  config_get _macaddr radio0 macaddr
  json_add_string "mac_ssid2" "$_macaddr"
  if [ "$(is_5ghz_capable)" == "1" ]
  then
    config_get _macaddr radio1 macaddr
    json_add_string "mac_ssid5" "$_macaddr"
  fi

  if [ "$_mesh_mode" -gt "1" ]
  then
    config_get _macaddr mesh2_ap macaddr
    json_add_string "mac_mesh0" "$_macaddr"
    if [ "$(is_5ghz_capable)" == "1" ]
    then
      config_get _macaddr mesh5_ap macaddr
      json_add_string "mac_mesh1" "$_macaddr"
    fi
  fi

  local _ifA="$(ifconfig br-lan 2>/dev/null)"
  [ $? == 0 ] && json_add_string "mac_bridge" "$(echo "$_ifA"| awk '/HWaddr/{print tolower($NF)}')"

  echo "$(json_dump)"
  json_cleanup
}

start_service() {
  procd_open_instance
  procd_set_param command nice minisapo 
  procd_append_param command "$(param_list)"
  procd_set_param respawn
  procd_set_param stdout 1 # forward stdout of the command to logd
  procd_set_param stderr 1 # same for stderr
  procd_set_param pidfile /var/run/minisapo.pid
  procd_close_instance
}

reload_service()
{
  if service_running; then
    ubus call anlix_sapo set_msg "$(param_list)"
  else
    start
  fi
}
